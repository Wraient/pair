Pair/
├── cmd/pair/                     // Main application entry point (CLI & TUI Launcher)
│   └── main.go                          // Parses CLI flags, initializes core services, starts the TUI or executes direct commands.
├── pkg/                                 // Internal Go packages (library code)
│   ├── appcore/                         // Core application services and lifecycle management
│   │   ├── app.go                       // Main application struct, initializes and wires up all services.
│   │   ├── config_service.go            // Manages loading, accessing, and saving application configuration.
│   │   ├── db_service.go                // Manages database connection and provides access to repositories.
│   │   └── log_service.go               // Configures and provides access to the application logger.
│   ├── config/                          // Configuration loading and data structures
│   │   ├── types.go                     // Defines the main Config struct mirroring config.toml.
│   │   └── paths.go                     // OS-aware functions to get paths for config, data, cache, scrapers.
│   ├── tui/                             // Terminal User Interface (BubbleTea or similar)
│   │   ├── app_model.go                 // Root model for the TUI application, handles global events and views.
│   │   ├── views/                       // Different screens/views presented to the user
│   │   │   ├── library_view.go          // View for browsing the user's anime library.
│   │   │   ├── anime_details_view.go    // View for showing detailed info about an anime and its episodes.
│   │   │   ├── scraper_manager_view.go  // View for managing scraper repositories and installing/uninstalling scrapers.
│   │   │   └── settings_view.go         // View for application settings, tracker logins, etc.
│   │   └── components/                  // Reusable TUI components (custom lists, inputs, modals).
│   ├── data/                            // Data access layer (repositories interacting with the database)
│   │   ├── models/                      // Database entity structs (GORM models or similar)
│   │   │   ├── pair.go                 // `LocalAnime` struct for the anime library table.
│   │   │   └── episode.go               // `LocalEpisode` struct for episode progress and details.
│   │   └── anime_repository.go          // CRUD operations for `LocalAnime`.
│   │   └── episode_repository.go        // CRUD operations for `LocalEpisode`.
│   ├── library/                         // Business logic for the user's anime library
│   │   └── service.go                   // Functions to add anime, update progress, link to trackers, manage local data.
│   ├── playback/                        // Video playback management
│   │   ├── mpv/                         // MPV specific logic
│   │   │   ├── controller.go            // Defines an interface for MPV control (Play, Pause, GetPosition, etc.).
│   │   │   ├── ipc_client_unix.go       // MPV IPC client for Linux/macOS (Unix domain sockets). (//go:build linux darwin)
│   │   │   ├── ipc_client_windows.go    // MPV IPC client for Windows (named pipes). (//go:build windows)
│   │   │   └── ipc_client_noop.go       // No-op IPC client if IPC is disabled or fails. (//go:build !linux,!darwin,!windows or as fallback)
│   │   └── service.go                   // Prepares MPV command, launches player, handles skip logic, saves progress.
│   ├── scraper/                         // Scraper interface, manager, external CLI handling
│   │   ├── interface.go                 // Defines `Scraper` interface and related structs (SearchResult, EpisodeInfo, StreamInfo).
│   │   ├── manager.go                   // Discovers, loads, and provides access to scraper instances.
│   │   ├── proxy_cli.go                 // `Scraper` implementation that calls an external CLI executable.
│   │   └── repo_handler.go              // Fetches `index.json` from scraper repos, downloads/installs scraper CLIs.
│   ├── tracker/                         // External tracking services (Anilist, MAL)
│   │   ├── contract/                    // Defines the `Tracker` interface and common DTOs.
│   │   │   ├── interface.go
│   │   │   └── types.go
│   │   ├── anilist/                     // Anilist specific implementation
│   │   │   └── client.go
│   │   ├── mal/                         // MyAnimeList specific implementation
│   │   │   └── client.go
│   │   └── service.go                   // Manages active tracker, authentication, and dispatches calls.
│   ├── metadata/                        // Fetching additional metadata
│   │   ├── jikan/                       // Jikan API client for MAL data (fillers, extended info).
│   │   │   └── client.go
│   │   └── imagecache/                  // Logic for fetching and caching images.
│   │       └── service.go
│   ├── discordrpc/                      // Discord Rich Presence integration
│   │   └── service.go
│   ├── utils/                           // General utility functions
│   │   ├── http.go                      // Shared HTTP client configuration.
│   │   ├── fs.go                        // Filesystem operations (checksum, mkdirall, path exists).
│   │   ├── exec.go                      // Helpers for executing external commands (rofi, fzf, scraper CLIs).
│   │   └── platform.go                  // Small platform-specific utilities (e.g., opening URL in browser).
├── data_user/                           // Directory for all user-specific runtime data (actual location OS-dependent, see config.Paths)
│   ├── pair.db                   // SQLite database file.
│   ├── config.toml                      // User's active configuration file (copied from example on first run).
│   ├── logs/                            // Log files.
│   │   └── app.log
│   ├── scrapers/                        // Root directory where downloaded scraper CLI executables are stored.
│   │   ├── <scraper_id_version>/        // e.g., "gogoanime_v1.2"
│   │   │   ├── <executable_name>        // e.g., "gogoanime_scraper" or "gogoanime_scraper.exe"
│   │   │   └── manifest.json            // Copy of the ScraperManifest for this installed scraper.
│   ├── scraper_repositories.json        // User's list of added scraper repository URLs.
│   └── tokens/                          // OAuth tokens for trackers.
│       ├── anilist.json
│       └── mal.json
├── build/                               // Build scripts, packaging assets, and installer configurations
│   ├── goreleaser.yml                   // GoReleaser configuration for cross-platform builds and releases.
│   ├── windows/
│   │   ├── pair.iss              // Inno Setup script for Windows installer.
│   │   └── icon.ico
│   ├── macos/
│   │   ├── Info.plist.tmpl              // Template for macOS .app bundle.
│   │   └── icon.icns
│   │   └── create_dmg.sh                // (Optional if not using GoReleaser for DMG)
│   ├── linux/
│   │   ├── pair.desktop          // .desktop file for Linux.
│   │   └── icon.png
├── assets/                              // Static assets to be embedded or packaged
│   └── config.toml.example              // Example configuration to be copied for the user on first run.
├── go.mod                               // Go module definition.
├── go.sum                               // Go module checksums.
└── README.md                            // Project overview, build instructions, etc.


pkg/config/paths.go:

    Will use os.UserConfigDir(), os.UserCacheDir(), os.UserHomeDir() to determine appropriate default locations for config.toml, Pair.db, scrapers/ directory, etc., based on the OS.

    Windows: C:\Users\Username\AppData\Roaming\Pair, C:\Users\Username\AppData\Local\Pair

    macOS: ~/Library/Application Support/Pair, ~/Library/Caches/Pair

    Linux: ~/.config/Pair, ~/.cache/Pair

pkg/playback/mpv_ipc_*.go:

    Use Go build tags (e.g., //go:build windows and //go:build !windows or //go:build linux darwin) to compile the correct IPC implementation.

    Windows: MPV uses named pipes for IPC. The path is \\.\pipe\mpvsocket by default if --input-ipc-server is not specified with a full path.

    Linux/macOS: MPV uses Unix domain sockets. The path is typically /tmp/mpvsocket or a path specified with --input-ipc-server.

    The mpv_controller.go will define the interface, and service.go will instantiate the correct platform-specific implementation.

pkg/scraper/repo_handler.go - DownloadAndInstallScraper:

    When downloading scraper executables from a ScraperManifest, it must check manifest.ExecutableOS and manifest.ExecutableArch against runtime.GOOS and runtime.GOARCH to ensure a compatible binary is downloaded.

    The index.json in scraper repositories should ideally list multiple ExecutableURL entries for different OS/Arch combinations for the same scraper ID and version.

    On Windows, scraper CLIs would typically be .exe files. On Linux/macOS, they'd be extensionless executables or scripts with a shebang.

    The os.Chmod(path, 0755) call to make executables runnable is primarily for Unix-like systems. Windows relies on file extensions (.exe, .bat, .com) or file associations rather than permission bits for executability in the same way. However, Go's os/exec will still execute .exe files correctly on Windows.

build/windows/Pair.iss (Inno Setup Script):

    This script defines how the Windows installer is created.

    It will specify:

        Application name, version, publisher.

        Files to include (your compiled Pair-cli.exe, any DLLs if needed, config.toml.example).

        Default installation directory (e.g., C:\Program Files\Pair).

        Creation of Start Menu shortcuts.

        Creation of desktop icons.

        (Optional) Association with any custom file types if you had them.

        (Optional) Registry entries.

        Uninstaller creation.

    You'd compile this .iss script using the Inno Setup Compiler (iscc.exe).

build/macos/create_dmg.sh and Info.plist:

    For macOS, applications are typically distributed as .app bundles inside .dmg disk images.

    Info.plist contains metadata for the .app bundle (bundle ID, version, icon file, executable name).

    A script (create_dmg.sh) would:

        Create the .app bundle directory structure (Pair.app/Contents/MacOS/, Pair.app/Contents/Resources/).

        Copy your compiled Go binary into Pair.app/Contents/MacOS/Pair-cli.

        Copy Info.plist into Pair.app/Contents/.

        Copy icon.icns into Pair.app/Contents/Resources/.

        Use hdiutil to create a .dmg from the .app bundle.

build/linux/Pair.desktop:

    A standard .desktop file allows integration with Linux desktop environments (shows up in application menus, sets the icon).

    It specifies Exec=/path/to/Pair-cli, Icon=/path/to/icon.png, Name=Pair, Categories=AudioVideo;Player;, etc.

    Installation might involve copying this file to /usr/share/applications/ (system-wide) or ~/.local/share/applications/ (user-specific).

build/goreleaser.yml:

    GoReleaser can automate the entire build, packaging (including .app bundles, .deb, .rpm, .zip, .tar.gz), and release process for all platforms. It can also generate checksums and upload artifacts to GitHub Releases. This is highly recommended for managing cross-platform releases. It can even use Inno Setup if the compiler is in the PATH.

pkg/utils/exec.go:

    When running external tools like rofi or fzf, ensure these are available on the user's system or provide guidance.

    For rofi image previews, the mechanism for passing icon paths is generally cross-platform if rofi itself is installed and configured.

Conditional Compilation (//go:build tags):

    Use these extensively in pkg/platform/ and pkg/playback/ to isolate OS-specific code.

    Example in mpv_ipc_unix.go: //go:build linux || darwin

    Example in mpv_ipc_windows.go: //go:build windows
